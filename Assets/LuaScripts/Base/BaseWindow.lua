--- 所有UI Window界面的父类
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by gan.qiang.
--- DateTime: 2022/11/8 15:23
---

--- @class BaseWindow : GameObject
--- @field protected __super BaseWindow 父类
--- @field protected __className BaseWindow 类名
--- @field protected windowType BaseWindow 窗口类型（子类必须赋值）
--- @field protected prefabPath BaseWindow 预制体路径（子类必须赋值）
local BaseWindow = Class.CreateClass("BaseWindow", "GameObject")
_G.BaseWindow = BaseWindow

--- New 子类必须重写
function BaseWindow:New()
    -- 窗口类型 -- 对应 UIManager.WindowType
    self.windowType = nil
    -- 当前UI的层级
    self.layerValue = nil
    -- 预制体名字
    self.prefabName = self:ClassName()
    -- 预制体路径
    self.prefabPath = nil
    -- 打开界面后传的参数
    self.curShowArgs = nil
    -- 打开界面完成后的回调
    self.showedCallback = nil
    -- 当前UI的Canvas
    self.canvas = nil

    -- 当前显示状态
    self.active = false
    -- 当前是否已销毁？
    self.isDestroy = false
end

--- GetWindowType 获得当前窗口类型
--- @return UIManager.WindowType
function BaseWindow:GetWindowType()
    return self.windowType or UIManager.WindowType.Error
end

--- SetUILayerValue 设置UI层级数值
--- @param layer number 层级数值
function BaseWindow:SetUILayerValue(layer)
    self.layerValue = layer
end

--- ClassName 获得类名
function BaseWindow:ClassName()
    return self.__className
end

--- GetPrefabName 获得预制体名字
--- @return string 预制体名字
function BaseWindow:GetPrefabName()
    return self.prefabName or self:ClassName()
end

--- GetPrefabPath 获得预制体路径
--- @return string 预制体路径
function BaseWindow:GetPrefabPath()
    if (string.IsNullOrEmpty(self.prefabPath)) then
        LogError(string.format("创建预制体失败，请检查预制体路径是否为空!!"))
    end
    return self.prefabPath
end

--- SetActive 设置物体显隐
--- @param active boolean 显隐
function BaseWindow:SetActive(active)
    self.active = active
    if (self.gameObject) then
        self.gameObject:SetActive(active)
    end
end

--- IsShow 获取界面是否是显示状态
--- @return boolean 是否处于显示状态？ true ：是
function BaseWindow:IsShow()
    local isShow = self.active and self.gameObject and self.gameObject.activeSelf and not self.isDestroy
    return isShow
end


--- Show 走UIManager的OpenUI后开始做打开界面处理
--- @param args table 打开界面后传的参数
--- @param callback function 打开界面完成后的回调
function BaseWindow:Show(args, callback)
    self.curShowArgs = args
    self.showedCallback = callback
    if (ResourceManager.IsNull(self.gameObject)) then
        self:LoadPrefab()
    else
        self:SetActive(true)
        self:_Showing()
    end
end

--- LoadPrefab 开始加载界面预制体
function BaseWindow:LoadPrefab()
    local prefabPath = self:GetPrefabPath() .. "/" .. self:GetPrefabName()
    UIManager.LoadPrefab(nil, prefabPath, function (prefabName, prefab)
        self:LoadPrefabComplete(prefabName, prefab)
    end)
end

--- LoadPrefabComplete 界面预制体加载完成
--- @param prefabName string 预制体名字
--- @param prefab GameObject 当前界面预制体
function BaseWindow:LoadPrefabComplete(prefabName, prefab)
    self:SetObj(prefab)
    self:_Prepared()
end

--- _Prepared 界面预制体加载完成后进行的预备工作
function BaseWindow:_Prepared()
    -- 挂载Canvas等组件
    if (not ResourceManager.IsNull(self.gameObject)) then
        self.canvas = self.gameObject:GetComponent(typeof(Canvas))
        if (ResourceManager.IsNull(self.canvas)) then
            self.canvas = self.gameObject:AddComponent(typeof(Canvas))
        end

        local graphicRaycaster = self.gameObject:GetComponent(typeof(GraphicRaycaster))
        if (ResourceManager.IsNull(graphicRaycaster)) then
            self.gameObject:AddComponent(typeof(GraphicRaycaster))
        end
    end

    if (not ResourceManager.IsNull(self.canvas)) then
        self.canvas.overrideSorting = true
        self.canvas.sortingOrder = self.layerValue
    end

    self:_Init()
end

--- _Init 预备工作完成，开始初始化
function BaseWindow:_Init()
    self:OnInit()
end

--- OnInit 子类可继承（初始化）
function BaseWindow:OnInit()
    self:_Showing()
end

--- _Showing 子类初始化完成，开始走预制体展示逻辑
function BaseWindow:_Showing()
    self:OnShowing()
end

--- OnShowing 子类可继承（展示界面）
function BaseWindow:OnShowing()
    self:_Showed()
end

--- _Showed 界面展示完成
function BaseWindow:_Showed()
    if (self.showedCallback) then
        self.showedCallback(self)
    end
    self.showedCallback = nil


    UIManager.UIShowed(self)
    self:OnShowed()
end

--- OnShowed 子类可继承（界面彻底展示完成）
function BaseWindow:OnShowed()

end

--- _OnHide 界面隐藏
function BaseWindow:_OnHide()
    -- TODO GQ 执行隐藏界面的操作
    self:SetActive(false)

    self:OnHide()
end

--- OnHide 子类可继承（界面隐藏）
function BaseWindow:OnHide()

end

--- _OnDispose 清理数据
function BaseWindow:_OnDispose()
    self.windowType = nil
    self.layerValue = nil
    self.prefabName = nil
    self.prefabPath = nil
    self.curShowArgs = nil
    self.showedCallback = nil
    self.canvas = nil

    self.active = false
    self.isDestroy = true

    self:ClearEvent()
    self:ClearGameObject()
end

--- Hide 隐藏界面
function BaseWindow:Hide()
    self:_OnHide()
end

--- Close 关闭界面
function BaseWindow:Close()
    self:_OnClose()
end

--- OnClose 子类可继承（关闭界面）
function BaseWindow:_OnClose()
    self:OnClose()
end

--- OnClose 子类可继承（关闭界面）
function BaseWindow:OnClose()
    self:_OnDispose()
end

--- CloseSelf 关闭自身
function BaseWindow:CloseSelf()
    UIManager.CloseUI(self:ClassName())
end

return BaseWindow