--- UI层级管理器
--- 用于管理整个UI框架的层级渲染顺序
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by gan.qiang.
--- DateTime: 2022/11/10 15:21
---

--- @class UILayerManager
local UILayerManager = {}
_G.UILayerManager = UILayerManager

--- @field ErrorUIStartLayerValue number 错误窗口的开始层级数值
local ErrorUIStartLayerValue = 1

--- @field MainUIStartLayerValue number 主界面常显窗口的开始层级数值
local MainUIStartLayerValue = 100

--- @field WindowUIStartLayerValue number 全屏窗口的开始层级数值
local WindowUIStartLayerValue = 1000

--- @field PopUIStartLayerValue number 弹窗窗口的开始层级数值
local PopUIStartLayerValue = 10000

--- @field LayerIncrementValue number 窗口层级增量数值（每打开一个窗口，层级自增数值：比如打开一个全屏窗口，该全屏窗口层级为1500，那么在这个全屏窗口上再打开一个全屏窗口，那么新的全屏窗口此时的层级为1550）
local LayerIncrementValue = 50

--- @field CurLayerValue number 当前显示的窗口层级
local CurLayerValue = 1

--- @class UILayerList UI层级队列信息   格式为：{ UIName = xxx, LayerValue = xxx, UIClass = BaseWindow }
--- @field UIName string 当前UI名字
--- @field LayerValue number 当前UI层级数值
--- @field UIClass BaseWindow 当前UI类
local UILayerList = {}

--- GetCurUILayerValue 获得当前UI的层级数值
--- @return number 当前UI层级数值
function UILayerManager.GetCurUILayerValue()
    return CurLayerValue
end

--- AddUILayer 添加UI层级
--- @param uiClass BaseWindow UI界面
function UILayerManager.AddUILayer(uiClass)
    local windowType = uiClass:GetWindowType()
    if (windowType == UIManager.WindowType.Error) then
        uiClass:SetUILayerValue(ErrorUIStartLayerValue)
        LogError(string.format("当前%s界面层级出错，请检查%s的self.windowType是否赋值!!", uiClass:ClassName(), uiClass:ClassName()))
    else
        UILayerManager.CalcLayerValue(uiClass)
    end
end

--- RemoveUILayer 移除UI层级
--- @param uiClass BaseWindow UI界面
function UILayerManager.RemoveUILayer(uiClass)
    local uiName = uiClass:ClassName()
    for index = #UILayerList, 1, -1 do
        local uiLayerInfo = UILayerList[index]
        if (uiLayerInfo.UIName == uiName) then
            UILayerList[index] = nil
            break
        end
    end
end

--- CalcLayerValue 计算UI层级数值
--- @param uiClass BaseWindow UI类
function UILayerManager.CalcLayerValue(uiClass)
    if (HUtils.IsEmpty(UILayerList)) then
        -- 说明一个界面还未打开，直接从主界面常显Main层级开始
        CurLayerValue = MainUIStartLayerValue
        UILayerList[#UILayerList + 1] = { UIName = uiClass:ClassName(), LayerValue = CurLayerValue, UIClass = uiClass }
    else
        local windowType = uiClass:GetWindowType()

        -- 否则直接取最后一个
        --- @type UILayerList
        local uiLayerInfo = UILayerList[#UILayerList]
        -- 上一个UI类的层级数值
        local lastLayerValue = uiLayerInfo.LayerValue
        -- 上一个UI类
        local lastUIClass = uiLayerInfo.UIClass
        -- 上一个UI窗口类型
        local lastWindowType = lastUIClass:GetWindowType()
        if (windowType == lastWindowType) then
            -- 如果打开的是相同类型的窗口（全屏打开全屏，弹窗打开弹窗）
            -- 那么就直接拿  上一个窗口的层级 + 增量层级  作为当前窗口的层级
            CurLayerValue = lastLayerValue + LayerIncrementValue
            UILayerList[#UILayerList + 1] = { UIName = uiClass:ClassName(), LayerValue = CurLayerValue, UIClass = uiClass }
        else
            -- 否则需要做窗口层级计算
            if (windowType > lastWindowType) then
                -- 如果打开的是更大层级的窗口（比如全屏打开弹窗） 那么就需要根据窗口类型来重设层级
                if (windowType == UIManager.WindowType.Window) then
                    -- 当前打开的是Window类型窗口，直接把层级从Window初始层级开始
                    CurLayerValue = WindowUIStartLayerValue
                elseif (windowType == UIManager.WindowType.Pop) then
                    -- 当前打开的是Pop类型窗口，直接把层级从Pop初始层级开始
                    CurLayerValue = PopUIStartLayerValue
                end
            else
                -- 否则想要打开一个低层级的窗口（比如在一个Pop的基础上再打开一个Window）
                -- 那么就直接拿  上一个窗口的层级 + 增量层级  作为当前窗口的层级
                CurLayerValue = lastLayerValue + LayerIncrementValue
            end
            UILayerList[#UILayerList + 1] = { UIName = uiClass:ClassName(), LayerValue = CurLayerValue, UIClass = uiClass }
        end
    end

    -- 为UI设置层级数值
    uiClass:SetUILayerValue(CurLayerValue)
end

--- Clear 游戏退出时清理UI层级数据
function UILayerManager.Clear()
    CurLayerValue = 1
    UILayerList = {}
end

return UILayerManager